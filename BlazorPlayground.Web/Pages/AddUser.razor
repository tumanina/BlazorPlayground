@page "/adduser"
@using System.Text.Json
@using BlazorPlayground.Web.Models
@using System.Text
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager;

<PageTitle>Add new user</PageTitle>

<h1>Add new User</h1>
<h3 style="color:red">@error</h3>
<EditForm Model="@newUser" OnSubmit="@HandleSubmit">
    <table>
        <tr>
            <td>
                <label>Name</label>
            </td>
            <td>
                <InputText DisplayName="Name" @bind-Value="newUser.Name" />
            </td>
        </tr>
    </table>
    <br />
    <br />
    Departments
    <table class="table">
        <tbody>
            @foreach (var department in departments)
            {
                <tr>
                    <td>@department</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <table>
        <tr>
            <td>
                <label>Department</label>
            </td>
            <td>
                <InputSelect @bind-Value="newDepartment">
                    @foreach (var countryFeature in @Enum.GetValues(typeof(Department)))
                    {
                        <option value=@countryFeature>@countryFeature</option>
                    }
                </InputSelect>
            </td>
        </tr>
        <tr>
            <button type="button" @onclick="@(() => {departments.Add(newDepartment); newDepartment = new();})">Add Department</button>
        </tr>
    </table>
    <br />
    <br />
    <button type="submit">Add User</button>
    <br/>
    <a href=@($"users")>Back to Users</a>
</EditForm>

@code {
    private User newUser = new();
    private Department newDepartment = new();
    private List<Department> departments = new List<Department>();
    private string error = "";
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        shouldRender = true;
    }

    private async void HandleSubmit()
    {
        newUser.Id = Guid.NewGuid();
        newUser.Departments = departments;
        var request = new HttpRequestMessage(HttpMethod.Put, "https://localhost:7268/api/users");
        request.Headers.Add("Accept", "application/json");
        request.Content = new StringContent(JsonConvert.SerializeObject(newUser), Encoding.UTF8, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            newUser = new User();
            NavigationManager.NavigateTo($"users");
        }
        if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            error = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        }
    }
}
