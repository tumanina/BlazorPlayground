@page "/userdepartments"
@using System.Text.Json
@using BlazorPlayground.Web.Models
@using System.Text
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager;

<PageTitle>Add new user</PageTitle>

<h1>User departments</h1>
<h3 style="color:red">@error</h3>
<br />
<a href=@($"adduserdepartments?userid={UserId}")>Add departments</a>
<br />

@if (departments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var department in departments)
            {
                <tr>
                    <td>@department</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <br />
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid UserId { get; set; }
    private List<Department> departments;
    private string error = "";
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7268/api/users/{UserId}/departments");
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            departments = JsonConvert.DeserializeObject<List<Department>>(content);
            shouldRender = true;
        }
        else
        {
            error = $"Received {response.StatusCode} with content: {await response.Content.ReadAsStringAsync()}";
            StateHasChanged();
        }
        shouldRender = true;
    }
}
