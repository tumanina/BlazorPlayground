@page "/edituser"
@using System.Text.Json
@using BlazorPlayground.Web.Models
@using System.Text
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager;

<PageTitle>Add new user</PageTitle>

<h1>Add new Feature to tenant</h1>
<h3 style="color:red">@error</h3>
<EditForm Model="@userToEdit" OnSubmit="@HandleSubmit">
    <table>
        <tr>
            <td>
                <label>Name</label>
            </td>
            <td>
                <InputText DisplayName="Name" @bind-Value="userToEdit.Name" />
            </td>
        </tr>
    </table>
    <br />
    <button type="submit">Edit User</button>
    <br />
    <a href=@($"users")>Back to Users</a>
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }
    private User userToEdit = new();
    private string error = "";
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        shouldRender = true;
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7268/api/users/{Id}");
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            userToEdit = JsonConvert.DeserializeObject<User>(content);
        }
        else
        {
            error = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        }
    }

    private async void HandleSubmit()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, "https://localhost:7268/api/users");
        request.Headers.Add("Accept", "application/json");
        request.Content = new StringContent(JsonConvert.SerializeObject(userToEdit), Encoding.UTF8, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"users");
        }
        if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            error = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        }
    }
}
